var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { FlatList } from 'react-native';
import { noop } from '../../utils';
class _VirtualList extends React.Component {
    constructor() {
        super(...arguments);
        this.scrollViewStartOffsetY = 0; // 用于记录手指开始滑动时ScrollView组件的Y轴偏移量，通过这个变量可以判断滚动方向
        this.scrollUpdateWasRequested = false;
        this.state = {};
        this.$ref = React.createRef();
        /**
         * 滑动开始回调事件
         * 注意：当刚刚开始滑动时，event.nativeEvent.contentOffset.y仍然是上次滑动的值，没有变化
         * @param event
         * @private
         */
        this._onScrollBeginDrag = (e) => {
            const { layout } = this.props;
            // event.nativeEvent.contentOffset.y表示Y轴滚动的偏移量
            const offsetY = e.nativeEvent.contentOffset[layout === 'vertical' ? 'y' : 'x'];
            // 记录ScrollView开始滚动的Y轴偏移量
            this.scrollViewStartOffsetY = offsetY;
        };
        this._onScroll = (e) => {
            const { onScroll = noop, layout, onScrollNative = noop } = this.props;
            onScrollNative(e);
            const offsetY = e.nativeEvent.contentOffset[layout === 'vertical' ? 'y' : 'x'];
            onScroll({
                onScroll: this.scrollViewStartOffsetY < offsetY ? 'forward' : 'backward',
                scrollOffset: Math.abs(this.scrollViewStartOffsetY - offsetY),
                scrollUpdateWasRequested: this.scrollUpdateWasRequested
            });
        };
        this.scrollTo = ({ offset }) => {
            const node = this.$ref.current;
            if (node) {
                node.scrollToOffset({ offset, animated: !!this.props.scrollWithAnimation });
            }
        };
        this.scrollToItem = ({ offset }) => {
            const node = this.$ref.current;
            if (node) {
                node.scrollToOffset({ offset, animated: !!this.props.scrollWithAnimation });
            }
        };
    }
    render() {
        const _a = this.props, { itemData, itemSize, layout, overscanCount, children } = _a, restProps = __rest(_a, ["itemData", "itemSize", "layout", "overscanCount", "children"]);
        const itemStyle = layout === 'vertical' ? { height: itemSize } : { width: itemSize };
        const itemRow = ({ item, index, separators }) => React.createElement(children, {
            data: itemData,
            key: index,
            index,
            item,
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            separators,
            style: Object.assign({}, itemStyle)
        });
        return (React.createElement(FlatList, Object.assign({}, restProps, { data: itemData, windowSize: overscanCount, horizontal: layout === 'horizontal', ref: this.$ref, onScroll: this._onScroll, onScrollBeginDrag: this._onScrollBeginDrag, renderItem: itemRow, keyExtractor: (_item, index) => index + '' })));
    }
}
_VirtualList.defaultProps = {
    upperThreshold: 50,
    lowerThreshold: 50,
    enableBackToTop: false,
    layout: 'vertical',
    overscanCount: 1
};
export default _VirtualList;
//# sourceMappingURL=index.js.map