import * as React from 'react';
import AntPicker from '@ant-design/react-native/lib/picker';
import regionData from './regions.formatted';
import { noop } from '../../utils';
import { TouchableWithoutFeedback } from 'react-native';
export default class RegionSelector extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            value: [],
            pvalue: []
        };
        this.onChange = (value) => {
            const { onChange = noop } = this.props;
            // 通过 value 查找 code
            let tmp = regionData;
            // eslint-disable-next-line array-callback-return
            const code = value.map((item) => {
                for (let i = 0; i < tmp.length; i++) {
                    if (tmp[i].value === item) {
                        const code = tmp[i].code;
                        tmp = tmp[i].children || [];
                        return code;
                    }
                }
            });
            onChange({ detail: { value, code } });
        };
        this.onPickerChange = (value) => {
            this.setState({ value });
        };
        this.onDismiss = () => {
            const { onCancel = noop } = this.props;
            onCancel();
        };
    }
    static getDerivedStateFromProps(nextProps, lastState) {
        if (nextProps.value !== lastState.pvalue) {
            return {
                value: nextProps.value,
                pvalue: nextProps.value
            };
        }
        return null;
    }
    render() {
        const { children, disabled, } = this.props;
        const { value, } = this.state;
        return (React.createElement(AntPicker, { data: regionData, value: value, onChange: this.onChange, onPickerChange: this.onPickerChange, onDismiss: this.onDismiss, disabled: disabled },
            React.createElement(TouchableWithoutFeedback, null, children)));
    }
}
RegionSelector.defaultProps = {
    value: [],
};
//# sourceMappingURL=region.js.map