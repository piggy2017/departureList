import { Gyroscope } from 'expo-sensors';
const gyroCase = {
    callbacks: [],
};
const intervalMap = {
    game: 20,
    ui: 60,
    normal: 200
};
/**
 * 开始监听陀螺仪数据
 * @param opts
 * @param {string} [opts.interval='normal'] 监听陀螺仪数据回调函数的执行频率
 */
function startGyroscope(opts = {}) {
    const { interval = 'normal', success, fail, complete } = opts;
    gyroCase.interval = interval;
    const res = { errMsg: 'startGyroscope:ok' };
    try {
        // 适配微信小程序行为：重复 start 失败
        if (gyroCase.listener) {
            throw new Error('startGyroscope:fail');
        }
        gyroCase.listener = Gyroscope.addListener(e => {
            gyroCase.callbacks.forEach((cb) => {
                cb === null || cb === void 0 ? void 0 : cb(e);
            });
        });
        success === null || success === void 0 ? void 0 : success(res);
        complete === null || complete === void 0 ? void 0 : complete(res);
    }
    catch (error) {
        res.errMsg = 'startGyroscope:fail';
        fail === null || fail === void 0 ? void 0 : fail(res);
        complete === null || complete === void 0 ? void 0 : complete(res);
        return Promise.reject(res);
    }
    Gyroscope.setUpdateInterval(intervalMap[interval]);
    return Promise.resolve(res);
}
/**
 * 停止监听陀螺仪数据
 * @param opts
 */
function stopGyroscope(opts = {}) {
    const { success, fail, complete } = opts;
    const res = { errMsg: 'stopGyroscope:ok' };
    try {
        gyroCase.listener.remove();
        gyroCase.listener = null;
        success === null || success === void 0 ? void 0 : success(res);
        complete === null || complete === void 0 ? void 0 : complete(res);
        return Promise.resolve(res);
    }
    catch (error) {
        res.errMsg = 'stopGyroscope:fail';
        fail === null || fail === void 0 ? void 0 : fail(res);
        complete === null || complete === void 0 ? void 0 : complete(res);
        return Promise.reject(res);
    }
}
/**
 * 监听陀螺仪数据变化事件
 * @param opts
 */
function onGyroscopeChange(fnc) {
    gyroCase.callbacks.push(fnc);
}
/**
 * 取消监听陀螺仪数据变化事件
 * @param opts
 */
function offGyroscopeChange(fnc) {
    if (fnc && typeof fnc === 'function') {
        gyroCase.callbacks = gyroCase.callbacks.filter((cb) => {
            return cb !== fnc;
        });
    }
    else if (fnc === undefined) {
        gyroCase.callbacks = [];
    }
    else {
        console.warn('offGyroscopeChange failed');
    }
}
export { startGyroscope, stopGyroscope, onGyroscopeChange, offGyroscopeChange, };
//# sourceMappingURL=gyroscope.js.map