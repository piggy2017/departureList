import * as Permissions from 'expo-permissions';
const globalAny = global;
class CameraContext {
    constructor(cameraRef) {
        /**
         * 开始录像
         */
        this.startRecord = (option) => {
            Permissions.askAsync(Permissions.CAMERA, Permissions.AUDIO_RECORDING).then(() => {
                var _a, _b, _c;
                (_a = this.cameraRef) === null || _a === void 0 ? void 0 : _a.recordAsync().then((res) => {
                    var _a, _b;
                    const { uri } = res;
                    const result = {
                        tempVideoPath: uri,
                        tempThumbPath: '',
                        errMsg: 'stopRecord: ok'
                    };
                    (_b = (_a = this.recordCallback) === null || _a === void 0 ? void 0 : _a.success) === null || _b === void 0 ? void 0 : _b.call(_a, result);
                }).catch((e) => {
                    var _a, _b, _c, _d;
                    const res = {
                        errMsg: e.message
                    };
                    (_a = option === null || option === void 0 ? void 0 : option.fail) === null || _a === void 0 ? void 0 : _a.call(option, res);
                    (_b = option === null || option === void 0 ? void 0 : option.complete) === null || _b === void 0 ? void 0 : _b.call(option, res);
                    (_d = (_c = this.recordCallback) === null || _c === void 0 ? void 0 : _c.fail) === null || _d === void 0 ? void 0 : _d.call(_c, { errMsg: e });
                }).finally(() => {
                    var _a, _b;
                    (_b = (_a = this.recordCallback) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a, { errMsg: '' });
                });
                const res = {
                    errMsg: 'startRecord: ok'
                };
                (_b = option === null || option === void 0 ? void 0 : option.success) === null || _b === void 0 ? void 0 : _b.call(option, res);
                (_c = option === null || option === void 0 ? void 0 : option.complete) === null || _c === void 0 ? void 0 : _c.call(option, res);
            });
        };
        /**
         * 结束录像
         */
        this.stopRecord = (option) => {
            var _a;
            this.recordCallback = option;
            (_a = this.cameraRef) === null || _a === void 0 ? void 0 : _a.stopRecording();
        };
        /**
         * 拍摄照片
         */
        this.takePhoto = (option) => {
            let quality = 0;
            switch (option.quality) {
                case 'high':
                    quality = 1;
                    break;
                case 'normal':
                    quality = 0.6;
                    break;
                case 'low':
                    quality = 0.3;
                    break;
            }
            Permissions.askAsync(Permissions.CAMERA, Permissions.AUDIO_RECORDING).then(() => {
                var _a;
                return (_a = this.cameraRef) === null || _a === void 0 ? void 0 : _a.takePictureAsync({ quality: quality }).then(res => {
                    var _a;
                    const { uri } = res;
                    (_a = option === null || option === void 0 ? void 0 : option.success) === null || _a === void 0 ? void 0 : _a.call(option, {
                        tempImagePath: uri !== null && uri !== void 0 ? uri : '',
                        errMsg: 'takePhoto: ok'
                    });
                }).catch(e => {
                    var _a;
                    (_a = option === null || option === void 0 ? void 0 : option.fail) === null || _a === void 0 ? void 0 : _a.call(option, { errMsg: e });
                }).finally(() => { var _a; return (_a = option === null || option === void 0 ? void 0 : option.complete) === null || _a === void 0 ? void 0 : _a.call(option, { errMsg: '' }); });
            }).catch((e) => console.log(e));
        };
        /**
         * 获取 Camera 实时帧数据
         * not support
         */
        this.onCameraFrame = () => {
            return {
                start() {
                    console.log('not support');
                },
                stop() {
                    console.log('not support');
                }
            };
        };
        this.cameraRef = cameraRef;
    }
}
/**
 * 创建 video 上下文 VideoContext 对象。
 * {string} @param - id video 组件的 id
 * {object} @param t - 在自定义组件下，当前组件实例的this，以操作组件内 video 组件
 */
export function createCameraContext() {
    const ref = globalAny._taroCamera;
    if (ref) {
        return new CameraContext(ref);
    }
    else {
        return undefined;
    }
}
//# sourceMappingURL=index.js.map