var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import CameraRoll from '@react-native-community/cameraroll';
import { Permissions } from 'react-native-unimodules';
import * as ImagePicker from 'expo-image-picker';
import { askAsyncPermissions } from '../utils/premissions';
export const MEDIA_TYPE = {
    VIDEOS: 'Videos',
    IMAGES: 'Images'
};
export function saveMedia(opts, type, API) {
    return __awaiter(this, void 0, void 0, function* () {
        const status = yield askAsyncPermissions(Permissions.CAMERA_ROLL);
        if (status !== 'granted') {
            const res = { errMsg: 'Permissions denied!' };
            return Promise.reject(res);
        }
        const { filePath, success, fail, complete } = opts;
        const res = { errMsg: `${API}:ok` };
        const saveType = (type === 'video' || type === 'photo') ? type : 'auto';
        return CameraRoll.save(filePath, { type: saveType })
            .then((url) => {
            res.path = url;
            success === null || success === void 0 ? void 0 : success(res);
            complete === null || complete === void 0 ? void 0 : complete(res);
            return Promise.resolve(res);
        }).catch((err) => {
            res.errMsg = err.message;
            fail === null || fail === void 0 ? void 0 : fail(res);
            complete === null || complete === void 0 ? void 0 : complete(res);
            return Promise.reject(res);
        });
    });
}
export function chooseMedia(opts, mediaTypes) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!opts || typeof opts !== 'object') {
            opts = {};
        }
        const { sizeType = [], sourceType = [], success, fail, complete, maxDuration } = opts;
        const options = {
            mediaTypes,
            quality: sizeType[0] === 'compressed' ? 0.7 : 1,
            videoMaxDuration: maxDuration
        };
        const isCamera = sourceType[0] === 'camera';
        const status = isCamera ? yield askAsyncPermissions(Permissions.CAMERA) : yield askAsyncPermissions(Permissions.CAMERA_ROLL);
        if (status !== 'granted') {
            const res = { errMsg: 'Permissions denied!' };
            return Promise.reject(res);
        }
        let p;
        return new Promise((resolve, reject) => {
            p = isCamera ? ImagePicker.launchCameraAsync(options) : ImagePicker.launchImageLibraryAsync(options);
            p.then((resp) => {
                const { uri, duration, width, height } = resp;
                resp.path = uri;
                let res = {};
                if (mediaTypes === MEDIA_TYPE.VIDEOS) {
                    res = {
                        tempFilePath: uri,
                        duration,
                        width,
                        height
                    };
                }
                else {
                    res = {
                        tempFilePaths: [uri],
                        tempFiles: [resp]
                    };
                }
                if (res.tempFilePath || (!!res.tempFilePaths && res.tempFilePaths.length > 0)) {
                    success === null || success === void 0 ? void 0 : success(res);
                    complete === null || complete === void 0 ? void 0 : complete(res);
                    resolve(res);
                }
                else {
                    const res = {
                        errMsg: mediaTypes === MEDIA_TYPE.VIDEOS ? 'chooseVideo:fail cancel' : 'chooseImage:fail cancel',
                    };
                    fail === null || fail === void 0 ? void 0 : fail(res);
                    complete === null || complete === void 0 ? void 0 : complete(res);
                    reject(res);
                }
            }).catch((err) => {
                const res = {
                    errMsg: mediaTypes === MEDIA_TYPE.VIDEOS ? 'chooseVideo fail' : 'chooseImage fail',
                    err
                };
                fail === null || fail === void 0 ? void 0 : fail(res);
                complete === null || complete === void 0 ? void 0 : complete(res);
                reject(res);
            });
        });
    });
}
//# sourceMappingURL=media.js.map