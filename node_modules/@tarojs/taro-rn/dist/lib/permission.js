var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Linking, AppState } from 'react-native';
import * as Permissions from 'expo-permissions';
const scopeMap = {
    'scope.userLocation': Permissions.LOCATION,
    'scope.record': Permissions.AUDIO_RECORDING,
    'scope.writePhotosAlbum': Permissions.CAMERA_ROLL,
    'scope.camera': Permissions.CAMERA,
    // 'scope.NOTIFICATIONS': Permissions.NOTIFICATIONS,
    // 'scope.USER_FACING_NOTIFICATIONS': Permissions.USER_FACING_NOTIFICATIONS,
    // 'scope.CONTACTS': Permissions.CONTACTS,
    // 'scope.CALENDAR': Permissions.CALENDAR,
    // 'scope.REMINDERS': Permissions.REMINDERS, // ios only
    // 'scope.SYSTEM_BRIGHTNESS': Permissions.SYSTEM_BRIGHTNESS
};
let stateListener; // 缓存监听函数
const getAuthSetting = () => __awaiter(void 0, void 0, void 0, function* () {
    const keyArr = Object.keys(scopeMap);
    const scopeArr = keyArr.map(key => scopeMap[key]);
    let auths = {};
    const { permissions } = yield Permissions.getAsync(...scopeArr);
    Object.keys(permissions).forEach(pkey => {
        keyArr.forEach((skey) => {
            if (scopeMap[skey] === pkey) {
                auths[skey] = permissions[pkey].status === 'granted';
            }
        });
    });
    return auths;
});
const handleAppStateChange = (nextAppState, resolve, reject, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const { success, fail, complete } = opts;
    const res = {};
    if (AppState.currentState === 'active') {
        try {
            res.authSetting = yield getAuthSetting();
            res.errMsg = 'openSetting:ok';
            success && success(res);
            complete && complete(res);
            AppState.removeEventListener('change', stateListener);
            resolve(res);
        }
        catch (error) {
            res.errMsg = 'openSetting:fail';
            fail && fail(res);
            complete && complete(res);
            reject(error);
        }
    }
    // AppState.currentState = nextAppState;
});
export function authorize(opts) {
    const { scope, success, fail, complete } = opts;
    const res = {};
    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
        try {
            const { status } = yield Permissions.askAsync(scopeMap[scope]);
            if (status === 'granted') {
                res.errMsg = 'authorize:ok';
                success && success(res);
                complete && complete(res);
                resolve(res);
            }
            else {
                res.errMsg = 'authorize:denied/undetermined';
                fail && fail(res);
                complete && complete(res);
                resolve(res);
            }
        }
        catch (error) {
            res.errMsg = 'authorize:fail';
            fail && fail(res);
            complete && complete(res);
            reject(error);
        }
    }));
}
export function getSetting(opts) {
    const { success, fail, complete } = opts;
    const res = {};
    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
        try {
            res.authSetting = yield getAuthSetting();
            res.errMsg = 'getSetting:ok';
            success && success(res);
            complete && complete(res);
            resolve(res);
        }
        catch (error) {
            res.errMsg = 'getSetting:fail';
            fail && fail(res);
            complete && complete(res);
            reject(error);
        }
    }));
}
export function openSetting(opts) {
    return new Promise((resolve, reject) => {
        stateListener = (next) => handleAppStateChange(next, resolve, reject, opts);
        AppState.addEventListener('change', stateListener);
        Linking.openSettings();
    });
}
//# sourceMappingURL=permission.js.map