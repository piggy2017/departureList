var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import AsyncStorage from '@react-native-async-storage/async-storage';
function getStorageCurrentSize() {
    return __awaiter(this, void 0, void 0, function* () {
        const keys = yield AsyncStorage.getAllKeys();
        const mults = yield AsyncStorage.multiGet(keys);
        const size = mults.reduce((prev, current) => {
            const sum = prev + (current && current[1] ? current[1].length : 0);
            return sum;
        }, 0);
        return Number((size / 1024).toFixed(2));
    });
}
export function getStorageInfo(option = {}) {
    const { success, fail, complete } = option;
    const res = { errMsg: 'getStorageInfo:ok' };
    return new Promise((resolve, reject) => {
        AsyncStorage.getAllKeys()
            .then((data) => __awaiter(this, void 0, void 0, function* () {
            const result = Object.assign(Object.assign({}, res), { keys: data, currentSize: yield getStorageCurrentSize(), limitSize: Infinity });
            success && success(result);
            complete && complete(result);
            resolve(result);
        })).catch((err) => {
            res.errMsg = err.message;
            fail && fail(res);
            complete && complete(res);
            reject(err);
        });
    });
}
//# sourceMappingURL=index.js.map