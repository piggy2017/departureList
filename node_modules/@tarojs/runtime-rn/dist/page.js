import * as React from 'react';
import { ScrollView, RefreshControl, AppState, View, Dimensions } from 'react-native';
import { camelCase } from 'lodash';
import { PageProvider, getCurrentRoute } from '@tarojs/router-rn';
import { isFunction, EMPTY_OBJ, isArray, incrementId, successHandler, errorHandler } from './utils';
import { isClassComponent } from './app';
import { Current } from './current';
import { eventCenter } from './emmiter';
import EventChannel from './EventChannel';
const compId = incrementId();
// 页面实例
const instances = new Map();
// 对标小程序的实例
const pagesObj = new Map();
function setPageObject(inst, id) {
    pagesObj.set(id, inst);
}
function getPageObject(id) {
    return pagesObj.get(id);
}
export function injectPageInstance(inst, id) {
    instances.set(id, inst);
}
export function getPageInstance(id) {
    return instances.get(id);
}
function getLifecyle(instance, lifecyle) {
    return instance[lifecyle];
}
function safeExecute(path, lifecycle, ...args) {
    const instance = instances.get(path);
    if (instance == null) {
        return;
    }
    const func = getLifecyle(instance, lifecycle);
    if (isArray(func)) {
        const res = func.map(fn => fn.apply(instance, args));
        return res[0];
    }
    if (!isFunction(func)) {
        return;
    }
    return func.apply(instance, args);
}
const globalAny = global;
// eslint-disable-next-line import/no-mutable-exports
export let PageContext = EMPTY_OBJ;
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export function createPageConfig(Page, pageConfig) {
    var _a;
    const h = React.createElement;
    const pagePath = pageConfig.pagePath || '';
    const pageId = (_a = camelCase(pagePath)) !== null && _a !== void 0 ? _a : `taro_page_${compId}`;
    const isReactComponent = isClassComponent(Page);
    if (PageContext === EMPTY_OBJ) {
        PageContext = React.createContext('');
    }
    let ScreenPage = Page;
    if (!isReactComponent) {
        // eslint-disable-next-line react/display-name
        ScreenPage = React.forwardRef((props, ref) => {
            const newProps = Object.assign({}, props);
            newProps.ref = ref;
            return h(View, Object.assign({}, newProps), h(Page, Object.assign({}, props), null));
        });
    }
    // 注入的页面实例
    injectPageInstance(Page, pageId);
    const WrapScreen = (Screen) => {
        return class PageScreen extends React.Component {
            constructor(props) {
                var _a;
                super(props);
                const refreshStyle = (_a = globalAny === null || globalAny === void 0 ? void 0 : globalAny.__taroRefreshStyle) !== null && _a !== void 0 ? _a : {};
                this.state = {
                    refreshing: false,
                    appState: AppState.currentState,
                    textColor: refreshStyle.textColor || '#ffffff',
                    backgroundColor: refreshStyle.backgroundColor || '#ffffff'
                };
                this.screenRef = React.createRef();
                this.pageScrollView = React.createRef();
                this.setPageInstance();
            }
            componentDidMount() {
                const { navigation } = this.props;
                // 退到后台的触发对应的生命周期函数
                AppState.addEventListener('change', (nextAppState) => this.onAppStateChange(nextAppState));
                // 屏幕宽高发送变化
                Dimensions.addEventListener('change', ({ window }) => this.onResize({ window }));
                if (navigation) {
                    this.unSubscribleTabPress = navigation.addListener('tabPress', () => this.onTabItemTap());
                    this.unSubscribleFocus = navigation.addListener('focus', () => this.onFocusChange());
                    this.unSubscribleBlur = navigation.addListener('blur', () => this.onBlurChange());
                }
                eventCenter.on('__taroPullDownRefresh', ({ path, refresh }) => this.pullDownRefresh(path, refresh), this);
                eventCenter.on('__taroPageScrollTo', ({ path, scrollTop }) => this.pageToScroll({ path, scrollTop }), this);
                eventCenter.on('__taroSetRefreshStyle', () => this.setRefreshStyle(), this);
            }
            componentWillUnmount() {
                const { navigation } = this.props;
                AppState.removeEventListener('change', () => this.onAppStateChange);
                Dimensions.removeEventListener('change', ({ window }) => this.onResize({ window }));
                eventCenter.off('__taroPullDownRefresh', ({ path, refresh }) => this.pullDownRefresh(path, refresh), this);
                eventCenter.off('__taroPageScrollTo', ({ path, scrollTop }) => this.pageToScroll({ path, scrollTop }), this);
                eventCenter.off('__taroSetRefreshStyle', () => this.setRefreshStyle(), this);
                if (navigation) {
                    this.unSubscribleTabPress();
                    this.unSubscribleBlur();
                    this.unSubscribleFocus();
                }
            }
            setPageInstance() {
                const pageRef = this.screenRef;
                const { params = {}, key = '' } = this.props.route;
                // 和小程序的page实例保持一致
                const inst = {
                    config: pageConfig,
                    route: pagePath,
                    options: params,
                    onReady() {
                        const page = pageRef.current;
                        if (page != null && isFunction(page.componentDidMount)) {
                            page.componentDidMount && page.componentDidMount();
                        }
                        else {
                            safeExecute(pageId, 'onReady');
                        }
                    },
                    onShow() {
                        const page = pageRef.current;
                        if (page != null && isFunction(page.componentDidShow)) {
                            page.componentDidShow && page.componentDidShow();
                        }
                        else {
                            safeExecute(pageId, 'componentDidShow');
                        }
                    },
                    onHide() {
                        const page = pageRef.current;
                        if (page != null && isFunction(page.componentDidHide)) {
                            page.componentDidHide && page.componentDidHide();
                        }
                        else {
                            safeExecute(pageId, 'componentDidHide');
                        }
                    },
                    onPullDownRefresh() {
                        const page = pageRef.current;
                        if (page != null && isFunction(page.onPullDownRefresh)) {
                            page.onPullDownRefresh && page.onPullDownRefresh();
                        }
                        else {
                            safeExecute(pageId, 'onPullDownRefresh');
                        }
                    },
                    onReachBottom() {
                        const page = pageRef.current;
                        if (page != null && isFunction(page.onReachBottom)) {
                            page.onReachBottom && page.onReachBottom();
                        }
                        else {
                            safeExecute(pageId, 'onReachBottom');
                        }
                    },
                    onPageScroll(options) {
                        const page = pageRef.current;
                        if (page != null && isFunction(page.onReachBottom)) {
                            page.onPageScroll && page.onPageScroll(options);
                        }
                        else {
                            safeExecute(pageId, 'onPageScroll', options);
                        }
                    },
                    onResize(options) {
                        const page = pageRef.current;
                        if (page != null && isFunction(page.onResize)) {
                            page.onResize && page.onResize(options);
                        }
                        else {
                            safeExecute(pageId, 'onResize', options);
                        }
                    },
                    onTabItemTap(options) {
                        const page = pageRef.current;
                        if (page != null && isFunction(page.onTabItemTap)) {
                            page.onTabItemTap && page.onTabItemTap(options);
                        }
                        else {
                            safeExecute(pageId, 'onTabItemTap', options);
                        }
                    },
                    onUnload() {
                        const page = pageRef.current;
                        if (page != null && isFunction(page.componentWillUnmount)) {
                            page.componentWillUnmount && page.componentWillUnmount();
                        }
                        else {
                            safeExecute(pageId, 'onUnload');
                        }
                    },
                    getOpenerEventChannel() {
                        return EventChannel.pageChannel;
                    }
                };
                // 存储对应小程序的实例
                setPageObject(inst, key);
                Current.router = {
                    params: params,
                    path: pagePath
                };
                Current.page = inst;
            }
            pullDownRefresh(path, refresh) {
                if (path === pagePath) {
                    this.setState({ refreshing: refresh });
                }
            }
            setRefreshStyle() {
                var _a;
                const refreshStyle = (_a = globalAny === null || globalAny === void 0 ? void 0 : globalAny.__taroRefreshStyle) !== null && _a !== void 0 ? _a : {};
                this.setState({
                    textColor: refreshStyle.textColor || '#ffffff',
                    backgroundColor: refreshStyle.backgroundColor || '#ffffff'
                });
            }
            pageToScroll({ path = '', scrollTop = 0 }) {
                var _a, _b;
                if (path === pagePath) {
                    (_b = (_a = this.pageScrollView) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.scrollTo({ x: 0, y: scrollTop, animated: true });
                }
            }
            onFocusChange() {
                var _a, _b, _c, _d;
                // 页面切换，当前instance重新赋值
                this.setPageInstance();
                try {
                    this.handleHooksEvent('componentDidShow');
                    if ((_b = (_a = this.screenRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.componentDidShow) {
                        (_d = (_c = this.screenRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.componentDidShow();
                    }
                }
                catch (err) {
                    throw new Error(err);
                }
            }
            onBlurChange() {
                var _a, _b, _c, _d;
                try {
                    this.handleHooksEvent('componentDidHide');
                    if ((_b = (_a = this.screenRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.componentDidHide) {
                        (_d = (_c = this.screenRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.componentDidHide();
                    }
                }
                catch (err) {
                    throw new Error(err);
                }
            }
            onAppStateChange(nextAppState) {
                var _a, _b, _c, _d, _e, _f, _g, _h;
                const { appState } = this.state;
                if (appState.match(/inactive|background/) && nextAppState === 'active') {
                    this.handleHooksEvent('componentDidShow');
                    if ((_b = (_a = this.screenRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.componentDidShow) {
                        (_d = (_c = this.screenRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.componentDidShow();
                    }
                }
                else {
                    this.handleHooksEvent('componentDidHide');
                    if ((_f = (_e = this.screenRef) === null || _e === void 0 ? void 0 : _e.current) === null || _f === void 0 ? void 0 : _f.componentDidHide) {
                        (_h = (_g = this.screenRef) === null || _g === void 0 ? void 0 : _g.current) === null || _h === void 0 ? void 0 : _h.componentDidHide();
                    }
                }
                this.setState({ appState: nextAppState });
            }
            onPageScroll(e) {
                var _a, _b, _c, _d;
                const { contentOffset } = e.nativeEvent;
                const scrollTop = contentOffset.y;
                if (scrollTop < 0)
                    return;
                try {
                    this.handleHooksEvent('onPageScroll', { scrollTop });
                    if ((_b = (_a = this.screenRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.onPageScroll) {
                        (_d = (_c = this.screenRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.onPageScroll({ scrollTop });
                    }
                }
                catch (err) {
                    throw new Error(err);
                }
            }
            onResize({ window }) {
                var _a, _b, _c, _d;
                try {
                    this.handleHooksEvent('onResize', { size: window });
                    if ((_b = (_a = this.screenRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.onResize) {
                        (_d = (_c = this.screenRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.onResize({ size: window });
                    }
                }
                catch (err) {
                    throw new Error(err);
                }
            }
            // 监听的onMomentumScrollEnd
            onReachBottom(e) {
                var _a, _b, _c, _d;
                const { onReachBottomDistance = 50 } = pageConfig;
                const { layoutMeasurement, contentSize, contentOffset } = e.nativeEvent;
                if ((contentOffset === null || contentOffset === void 0 ? void 0 : contentOffset.y) + (layoutMeasurement === null || layoutMeasurement === void 0 ? void 0 : layoutMeasurement.height) + onReachBottomDistance >= contentSize.height) {
                    try {
                        this.handleHooksEvent('onReachBottom');
                        if ((_b = (_a = this.screenRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.onReachBottom) {
                            (_d = (_c = this.screenRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.onReachBottom();
                        }
                    }
                    catch (err) {
                        throw new Error(err);
                    }
                }
            }
            // 下拉刷新
            onPullDownRefresh() {
                var _a, _b, _c, _d;
                this.setState({ refreshing: true });
                try {
                    this.handleHooksEvent('onPullDownRefresh');
                    if ((_b = (_a = this.screenRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.onPullDownRefresh) {
                        (_d = (_c = this.screenRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.onPullDownRefresh();
                    }
                }
                catch (e) {
                    throw new Error(e);
                }
                finally {
                    this.setState({ refreshing: false });
                }
            }
            onTabItemTap() {
                var _a, _b, _c, _d;
                try {
                    const item = this.getTabItem(pagePath);
                    this.handleHooksEvent('onTabItemTap', Object.assign({}, item));
                    if ((_b = (_a = this.screenRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.onTabItemTap) {
                        (_d = (_c = this.screenRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.onTabItemTap(item);
                    }
                }
                catch (error) {
                    throw new Error(error);
                }
            }
            handleHooksEvent(method, options = {}) {
                if (!isReactComponent) {
                    return safeExecute(pageId, method, options);
                }
            }
            getTabItem(itemPath) {
                var _a, _b;
                const tabBar = ((_b = (_a = globalAny.__taroAppConfig) === null || _a === void 0 ? void 0 : _a.appConfig) === null || _b === void 0 ? void 0 : _b.tabBar) || {};
                if (!tabBar)
                    return '';
                let result = {};
                for (let i = 0; i < tabBar.list.length; i++) {
                    const item = tabBar.list[i];
                    const path = item.pagePath.startsWith('/') ? item.pagePath : `/${item.pagePath}`;
                    if (path === itemPath) {
                        result = {
                            index: i,
                            pagePath: path,
                            text: item.text
                        };
                    }
                }
                return result;
            }
            isEnablePullDown() {
                var _a, _b;
                const windowOptions = ((_b = (_a = globalAny.__taroAppConfig) === null || _a === void 0 ? void 0 : _a.appConfig) === null || _b === void 0 ? void 0 : _b.window) || {};
                const { enablePullDownRefresh = false } = windowOptions;
                return (pageConfig === null || pageConfig === void 0 ? void 0 : pageConfig.enablePullDownRefresh) || enablePullDownRefresh;
            }
            refreshPullDown() {
                const { refreshing, textColor, backgroundColor } = this.state;
                return React.createElement(RefreshControl, {
                    refreshing: refreshing,
                    enabled: true,
                    titleColor: textColor,
                    tintColor: textColor,
                    colors: [backgroundColor],
                    onRefresh: () => this.onPullDownRefresh()
                }, null);
            }
            createPage() {
                return h(PageProvider, Object.assign({ currentPath: pagePath, pageConfig }, this.props), h(PageContext.Provider, { value: pageId }, h(Screen, Object.assign(Object.assign({}, this.props), { ref: this.screenRef }))));
            }
            createScrollPage() {
                var _a, _b;
                let bgColor = pageConfig.backgroundColor ? pageConfig.backgroundColor : '';
                const windowOptions = ((_b = (_a = globalAny.__taroAppConfig) === null || _a === void 0 ? void 0 : _a.appConfig) === null || _b === void 0 ? void 0 : _b.window) || {};
                if (!bgColor && (windowOptions === null || windowOptions === void 0 ? void 0 : windowOptions.backgroundColor)) {
                    bgColor = windowOptions === null || windowOptions === void 0 ? void 0 : windowOptions.backgroundColor;
                }
                const refresh = this.isEnablePullDown() ? { refreshControl: this.refreshPullDown() } : {};
                return h(ScrollView, Object.assign(Object.assign({ style: [{ flex: 1 }, (bgColor ? { backgroundColor: bgColor } : {})], contentContainerStyle: { minHeight: '100%' }, ref: this.pageScrollView, scrollEventThrottle: 8 }, refresh), { onScroll: (e) => this.onPageScroll(e), onMomentumScrollEnd: (e) => this.onReachBottom(e) }), this.createPage());
            }
            render() {
                const { disableScroll = false } = pageConfig;
                return (!disableScroll ? this.createScrollPage() : this.createPage());
            }
        };
    };
    const pageComponet = WrapScreen(ScreenPage);
    return pageComponet;
}
export function startPullDownRefresh(options = {}) {
    const currentPage = Current.page;
    const path = currentPage === null || currentPage === void 0 ? void 0 : currentPage.route;
    const { success, fail, complete } = options;
    let errMsg = 'startPullDownRefresh:ok';
    try {
        eventCenter.trigger('__taroPullDownRefresh', { path, refresh: true });
        success && success({ errMsg });
    }
    catch (error) {
        errMsg = 'startPullDownRefresh:fail';
        fail && fail({ errMsg });
    }
    finally {
        complete && complete({ errMsg });
    }
}
export function stopPullDownRefresh(options = {}) {
    const currentPage = Current.page;
    const path = currentPage === null || currentPage === void 0 ? void 0 : currentPage.route;
    const { success, fail, complete } = options;
    let errMsg = 'stopPullDownRefresh:ok';
    try {
        eventCenter.trigger('__taroPullDownRefresh', { path, refresh: false });
        success && success({ errMsg });
    }
    catch (error) {
        errMsg = 'stopPullDownRefresh:fail';
        fail && fail({ errMsg });
    }
    finally {
        complete && complete({ errMsg });
    }
}
export function pageScrollTo(options = {}) {
    const currentPage = Current.page;
    const path = currentPage === null || currentPage === void 0 ? void 0 : currentPage.route;
    const { success, fail, complete, scrollTop = 0 } = options;
    let errMsg = 'pageScrollTo:ok';
    try {
        eventCenter.trigger('__taroPageScrollTo', { path, scrollTop });
        success && success({ errMsg });
    }
    catch (error) {
        errMsg = 'pageScrollTo:fail';
        fail && fail({ errMsg });
    }
    finally {
        complete && complete({ errMsg });
    }
}
// 仅支持android
export function setBackgroundColor(options) {
    const { backgroundColor, success, fail, complete } = options;
    const errMsg = ' setBackgroundColor: ok';
    const refreshStyle = globalAny.__taroRefreshStyle || {};
    try {
        refreshStyle.backgroundColor = backgroundColor;
        globalAny.__taroRefreshStyle = refreshStyle;
        eventCenter.trigger('__taroSetRefreshStyle');
        return successHandler(success, complete)({ errMsg });
    }
    catch (error) {
        const errMsg = ' setBackgroundColor: error';
        return errorHandler(fail, complete)({ errMsg });
    }
}
// 仅支持ios
export function setBackgroundTextStyle(options) {
    const { textStyle, success, fail, complete } = options;
    const textColor = textStyle === 'dark' ? '#000000' : '#ffffff';
    const errMsg = ' setBackgroundTextStyle: ok';
    const refreshStyle = globalAny.__taroRefreshStyle || {};
    try {
        refreshStyle.textColor = textColor;
        globalAny.__taroRefreshStyle = refreshStyle;
        eventCenter.trigger('__taroSetRefreshStyle');
        return successHandler(success, complete)({ errMsg });
    }
    catch (error) {
        const errMsg = ' setBackgroundTextStyle: error';
        return errorHandler(fail, complete)({ errMsg });
    }
}
export function getCurrentPages() {
    const pages = [];
    const routes = getCurrentRoute();
    if (routes && routes.length > 0) {
        routes.forEach(item => {
            const inst = getPageObject(item);
            inst && pages.push(inst);
        });
    }
    else { // 第一次初始化时，getCurrentRoute会为空
        const inst = Current.page;
        inst && pages.push(inst);
    }
    return pages;
}
//# sourceMappingURL=page.js.map