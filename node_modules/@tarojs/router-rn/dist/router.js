/* eslint-disable react/no-children-prop */
import * as React from 'react';
import { camelCase } from 'lodash';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator, CardStyleInterpolators } from '@react-navigation/stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { navigationRef } from './rootNavigation';
import CustomTabBar from './view/TabBar';
import HeadTitle from './view/HeadTitle';
import BackButton from './view/BackButton';
import { getTabItemConfig, getTabVisible, setTabConfig, getTabInitRoute } from './utils/index';
export function createRouter(config) {
    if (config.tabBar) {
        return createTabNavigate(config);
    }
    else {
        return createStackNavigate(config);
    }
}
function getTabNames(config) {
    let tabNames = [];
    const tabBar = config === null || config === void 0 ? void 0 : config.tabBar;
    if (!tabBar)
        return tabNames;
    tabNames = tabBar.list.map(item => {
        const pagePath = item.pagePath.startsWith('/') ? item.pagePath : `/${item.pagePath}`;
        return camelCase(pagePath);
    });
    return tabNames;
}
function getPageList(config) {
    // pageList 去除tabbar的页面
    const tabBar = config.tabBar;
    const pageList = config.pages;
    if (!tabBar)
        return pageList;
    const tabNames = getTabNames(config);
    return pageList.filter(item => tabNames.indexOf(item.name) === -1);
}
function getTabItemOptions(item, index) {
    return {
        tabBarLabel: getTabItemConfig(index, 'tabBarLabel') || item.text,
        tabBarBadge: getTabItemConfig(index, 'tabBarBadge'),
        tabBarVisible: getTabVisible(),
        tabBarTestID: `tabbar-${index}`
    };
}
function getHeaderView(title, color, props) {
    return React.createElement(HeadTitle, { label: title, color, headerProps: props }, null);
}
// screen配置的内容
function getStackOptions(config) {
    const windowOptions = config.window || {};
    const title = windowOptions.navigationBarTitleText || '';
    const headColor = windowOptions.navigationBarTextStyle || 'black';
    const bgColor = windowOptions.navigationBarBackgroundColor || '#ffffff';
    const headerTitleAlign = 'center';
    const defaultOptions = {
        title: title,
        headerShown: windowOptions.navigationStyle !== 'custom',
        headerTitle: (props) => getHeaderView(title, headColor, props),
        headerStyle: {
            backgroundColor: bgColor,
            shadowOffset: { width: 0, height: 0 },
            borderWidth: 0,
            elevation: 0,
            shadowOpacity: 1,
            borderBottomWidth: 0
        },
        headerTintColor: headColor,
        cardStyleInterpolator: CardStyleInterpolators.forHorizontalIOS,
        headerBackTitleVisible: false,
        headerPressColorAndroid: 'rgba(255,255,255,0)',
        headerTitleAlign,
        // eslint-disable-next-line react/display-name
        headerBackImage: ({ tintColor }) => {
            return React.createElement(BackButton, { tintColor }, null);
        }
    };
    const rnConfig = config.rnConfig || {};
    const screenOptions = (rnConfig === null || rnConfig === void 0 ? void 0 : rnConfig.screenOptions) || {};
    return Object.assign({}, defaultOptions, screenOptions);
}
function getTabItem(config, tabName) {
    const tabBar = config.tabBar;
    const pageList = config.pages;
    if (!tabBar)
        return pageList;
    let tabItem = {
        name: '',
        component: {},
        pagePath: ''
    };
    pageList.forEach(item => {
        if (item.name === tabName) {
            tabItem = item;
        }
    });
    return tabItem;
}
function getInitRouteName(config) {
    let initRoute = '';
    const rn = config.rnConfig || {};
    if (rn === null || rn === void 0 ? void 0 : rn.initialRouteName) {
        initRoute = camelCase(rn.initialRouteName);
    }
    else {
        initRoute = config.pages[0].name;
    }
    return initRoute;
}
function getInitTabRoute(config) {
    const pageList = config.pages;
    const tabNames = getTabNames(config);
    let initTabName = '';
    for (let i = 0; i < pageList.length; i++) {
        const item = pageList[i];
        if (tabNames.indexOf(item.name) !== -1) {
            initTabName = item.name;
            break;
        }
    }
    return initTabName;
}
function createTabStack(config, parentProps) {
    const Tab = createBottomTabNavigator();
    const tabBar = config.tabBar;
    const rnConfig = config.rnConfig;
    const tabList = [];
    const userOptions = (rnConfig === null || rnConfig === void 0 ? void 0 : rnConfig.options) || {};
    tabBar === null || tabBar === void 0 ? void 0 : tabBar.list.forEach((item, index) => {
        var _a;
        const defaultOptions = Object.assign({}, { tabBarVisible: ((_a = config.tabBar) === null || _a === void 0 ? void 0 : _a.custom) ? false : getTabVisible() }, getTabItemOptions(item, index));
        const tabItemOptions = Object.assign({}, defaultOptions, userOptions);
        setTabConfig('tabBarVisible', tabItemOptions.tabBarVisible);
        const path = item.pagePath.startsWith('/') ? item.pagePath : `/${item.pagePath}`;
        const tabName = camelCase(path);
        const tabPage = getTabItem(config, tabName);
        const tabNode = React.createElement(Tab.Screen, Object.assign({ key: `tab${tabName}`, name: `${tabPage.name}`, options: tabItemOptions, component: tabPage.component }, parentProps));
        tabList.push(tabNode);
    });
    const userTabBarOptions = (rnConfig === null || rnConfig === void 0 ? void 0 : rnConfig.tabBarOptions) || {};
    // tabbarOptions
    const tabBarOptions = Object.assign({
        backBehavior: 'none',
        activeTintColor: (tabBar === null || tabBar === void 0 ? void 0 : tabBar.selectedColor) || '#3cc51f',
        inactiveTintColor: (tabBar === null || tabBar === void 0 ? void 0 : tabBar.color) || '#7A7E83',
        activeBackgroundColor: (tabBar === null || tabBar === void 0 ? void 0 : tabBar.backgroundColor) || '#ffffff',
        inactiveBackgroundColor: (tabBar === null || tabBar === void 0 ? void 0 : tabBar.backgroundColor) || '#ffffff',
        style: (tabBar === null || tabBar === void 0 ? void 0 : tabBar.borderStyle) ? {
            backgroundColor: tabBar === null || tabBar === void 0 ? void 0 : tabBar.backgroundColor,
            borderTopColor: ((tabBar === null || tabBar === void 0 ? void 0 : tabBar.borderStyle) === 'black' ? '#000000' : '#ffffff')
        } : {}
    }, userTabBarOptions);
    const tabNames = getTabNames(config);
    const tabInitRouteName = getTabInitRoute() || getInitTabRoute(config) || tabNames[0];
    return React.createElement(Tab.Navigator, {
        tabBarOptions: tabBarOptions,
        tabBar: (props) => createTabBar(props, userOptions),
        initialRouteName: tabInitRouteName,
        children: tabList
    }, tabList);
}
function createTabBar(props, userOptions) {
    return React.createElement(CustomTabBar, Object.assign(Object.assign({}, props), { userOptions }));
}
function getLinkingConfig(config) {
    var _a, _b;
    const prefixes = ((_a = config === null || config === void 0 ? void 0 : config.rnConfig) === null || _a === void 0 ? void 0 : _a.linking) || config.linkPrefix || [];
    const screens = {};
    const pageList = getPageList(config);
    pageList.forEach(item => {
        const path = item.pagePath.startsWith('/') ? item.pagePath.substr(1) : item.pagePath;
        screens[`${item.name}`] = path;
    });
    let tabScreen = {};
    if (config.tabBar) {
        const tabs = {};
        const tabBarList = ((_b = config.tabBar) === null || _b === void 0 ? void 0 : _b.list) || [];
        tabBarList.forEach((item) => {
            const tabPath = item.pagePath.startsWith('/') ? item.pagePath : `/${item.pagePath}`;
            const tabName = camelCase(tabPath);
            tabs[`${tabName}`] = tabPath;
        });
        tabScreen = {
            tabNav: {
                path: '',
                screens: tabs
            }
        };
    }
    return {
        prefixes: prefixes,
        config: {
            screens: Object.assign(Object.assign({}, tabScreen), screens)
        }
    };
}
function createTabNavigate(config) {
    const screeList = [];
    const Stack = createStackNavigator();
    // 第一个页面是tabbar的
    const tabScreen = React.createElement(Stack.Screen, {
        name: 'tabNav',
        key: 'tabScreen',
        children: (props) => createTabStack(config, props)
    }, (props) => createTabStack(config, props));
    screeList.push(tabScreen);
    const pageList = getPageList(config);
    pageList.forEach(item => {
        const screenNode = React.createElement(Stack.Screen, {
            key: `${item.name}`,
            name: `${item.name}`,
            component: item.component
        }, null);
        screeList.push(screenNode);
    });
    const linking = getLinkingConfig(config);
    const tabStack = React.createElement(Stack.Navigator, {
        screenOptions: () => {
            const options = getCurrentOptions();
            const defaultOptions = getStackOptions(config);
            return Object.assign({}, defaultOptions, options);
        },
        initialRouteName: getInitRouteName(config),
        children: screeList
    }, screeList);
    return React.createElement(NavigationContainer, { ref: navigationRef, linking: linking, children: tabStack }, tabStack);
}
function createStackNavigate(config) {
    const Stack = createStackNavigator();
    const pageList = getPageList(config);
    if (pageList.length <= 0)
        return null;
    const screenChild = [];
    pageList.forEach(item => {
        const screenNode = React.createElement(Stack.Screen, {
            key: `${item.name}`,
            name: `${item.name}`,
            component: item.component
        }, null);
        screenChild.push(screenNode);
    });
    const linking = getLinkingConfig(config);
    const stackNav = React.createElement(Stack.Navigator, { screenOptions: getStackOptions(config), children: screenChild }, screenChild);
    return React.createElement(NavigationContainer, { ref: navigationRef, linking: linking, children: stackNav }, stackNav);
}
function getCurrentOptions() {
    var _a, _b, _c;
    const options = ((_a = navigationRef.current) === null || _a === void 0 ? void 0 : _a.getCurrentOptions()) || {};
    const params = ((_c = (_b = navigationRef.current) === null || _b === void 0 ? void 0 : _b.getCurrentRoute()) === null || _c === void 0 ? void 0 : _c.params) || {};
    const navParams = (params === null || params === void 0 ? void 0 : params.navigateConfig) || {};
    return Object.assign({}, options, navParams);
}
//# sourceMappingURL=router.js.map