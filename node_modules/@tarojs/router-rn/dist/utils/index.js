import { camelCase } from 'lodash';
const globalAny = global;
export function isUrl(str) {
    const protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
    const localhostDomainRE = /^localhost[:?\d]*(?:[^:?\d]\S*)?$/;
    const nonLocalhostDomainRE = /^[^\s.]+\.\S{2,}$/;
    if (typeof str !== 'string') {
        return false;
    }
    const match = str.match(protocolAndDomainRE);
    if (!match) {
        return false;
    }
    const everythingAfterProtocol = match[1];
    if (!everythingAfterProtocol) {
        return false;
    }
    if (localhostDomainRE.test(everythingAfterProtocol) ||
        nonLocalhostDomainRE.test(everythingAfterProtocol)) {
        return true;
    }
    return false;
}
export function isFunction(obj) {
    return typeof obj === 'function';
}
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export function isEmptyObject(obj) {
    if (obj == null) {
        return true;
    }
    for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
            return false;
        }
    }
    return true;
}
export function successHandler(success, complete) {
    return function (res) {
        success && isFunction(success) && success(res);
        complete && isFunction(complete) && complete(res);
        return Promise.resolve(res);
    };
}
export function errorHandler(fail, complete) {
    return function (res) {
        fail && isFunction(fail) && fail(res);
        complete && isFunction(complete) && complete(res);
        return Promise.reject(res);
    };
}
export function getTabItemConfig(index, key) {
    const _taroTabBarIconConfig = globalAny.__taroTabBarIconConfig;
    const _taroTabItems = _taroTabBarIconConfig.tabItems;
    return _taroTabItems[index] && _taroTabItems[index][key];
}
export function getTabConfig(key) {
    const _taroTabBarIconConfig = globalAny.__taroTabBarIconConfig;
    return _taroTabBarIconConfig[key];
}
export function setTabConfig(key, value) {
    const tabBarConfig = globalAny.__taroTabBarIconConfig;
    tabBarConfig[key] = value;
    globalAny.__taroTabBarIconConfig = tabBarConfig;
}
export function setTabInitRoute(routeName) {
    globalAny.__taroTabInitRoute = routeName;
}
export function getTabInitRoute() {
    return globalAny.__taroTabInitRoute || '';
}
export function getTabVisible() {
    return getTabConfig('tabBarVisible');
}
export function getDefalutTabItem(index) {
    var _a;
    const _taroAppConfig = globalAny.__taroAppConfig || {};
    const tabBar = ((_a = _taroAppConfig === null || _taroAppConfig === void 0 ? void 0 : _taroAppConfig.appConfig) === null || _a === void 0 ? void 0 : _a.tabBar) || [];
    return (tabBar === null || tabBar === void 0 ? void 0 : tabBar.list[index]) || {};
}
// camelCase之后的页面
export function getTabBarPages() {
    var _a, _b;
    const tabBar = ((_b = (_a = globalAny.__taroAppConfig) === null || _a === void 0 ? void 0 : _a.appConfig) === null || _b === void 0 ? void 0 : _b.tabBar) || {};
    if (isEmptyObject(tabBar))
        return [];
    const pages = [];
    tabBar === null || tabBar === void 0 ? void 0 : tabBar.list.forEach((item) => {
        const path = item.pagePath.startsWith('/') ? item.pagePath : `/${item.pagePath}`;
        pages.push(camelCase(path));
    });
    return pages;
}
//# sourceMappingURL=index.js.map